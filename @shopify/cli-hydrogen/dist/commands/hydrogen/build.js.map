{"version":3,"file":"build.js","sources":["../../../src/cli/services/build.ts","../../../src/cli/commands/hydrogen/build.ts"],"sourcesContent":["import {build as viteBuild} from 'vite'\nimport {ui} from '@shopify/cli-kit'\n\ntype Target = 'node' | 'client' | 'worker'\n\ninterface DevOptions {\n  directory: string\n  targets: {[key in Target]: boolean | string}\n  base?: string\n}\n\nasync function build({directory, targets, base}: DevOptions) {\n  const commonConfig = {base, root: directory}\n\n  const tasks: ui.ListrTask[] = Object.entries(targets)\n    .filter(([_, value]) => value)\n    .map(([key, value]) => {\n      return {\n        title: `Building ${key} code`,\n        task: async (_, task) => {\n          process.env.WORKER = key === 'worker' ? 'true' : undefined\n          await viteBuild({\n            ...commonConfig,\n            build: {\n              outDir: `dist/${key}`,\n              ssr: typeof value === 'string' ? value : undefined,\n              manifest: key === 'client',\n            },\n          })\n\n          task.title = `Built ${key} code`\n        },\n      }\n    })\n\n  const list = new ui.Listr(tasks)\n\n  await list.run()\n}\n\nexport default build\n","import buildService from '../../services/build'\nimport {Command, Flags} from '@oclif/core'\nimport {path} from '@shopify/cli-kit'\n\nconst PLATFORM_ENTRIES = {\n  node: `@shopify/hydrogen/platforms/node`,\n  worker: `@shopify/hydrogen/platforms/worker`,\n}\n\nexport default class Build extends Command {\n  static description = 'Builds a Hydrogen storefront for production'\n  static flags = {\n    path: Flags.string({\n      hidden: true,\n      description: 'the path to your hydrogen storefront',\n      env: 'SHOPIFY_FLAG_PATH',\n    }),\n    base: Flags.string({\n      description: ' the public path when served in production',\n      env: 'SHOPIFY_FLAG_BUILD_BASE',\n    }),\n    client: Flags.boolean({\n      description: 'build the client code',\n      env: 'SHOPIFY_FLAG_BUILD_CLIENT',\n      allowNo: true,\n      default: true,\n    }),\n    target: Flags.string({\n      char: 't',\n      description: 'the target platform to build for (worker or node)',\n      options: ['node', 'worker'],\n      default: 'worker',\n      env: 'SHOPIFY_FLAG_BUILD_TARGET',\n    }),\n    entry: Flags.string({\n      description: 'produce Server Side Rendering (SSR) build for node environments',\n      env: 'SHOPIFY_FLAG_BUILD_SSR_ENTRY',\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Build)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n\n    const entry = flags.entry || PLATFORM_ENTRIES[flags.target as 'node' | 'worker']\n\n    const targets = {\n      client: flags.client,\n      worker: flags.target === 'worker' ? entry : false,\n      node: flags.target === 'node' ? entry : false,\n    }\n\n    await buildService({...flags, directory, targets})\n  }\n}\n"],"names":["viteBuild","buildService"],"mappings":"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"}